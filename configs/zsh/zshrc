# zmodload zsh/zprof

# If you come from bash you might have to change your $PATH.
# export PATH=$HOME/bin:/usr/local/bin:$PATH

# Path to your oh-my-zsh installation.
export ZSH="$HOME/.oh-my-zsh"

# export DISPLAY=$(grep nameserver /etc/resolv.conf | awk '{print $2}'):0.0

# Set name of the theme to load --- if set to "random", it will
# load a random theme each time oh-my-zsh is loaded, in which case,
# to know which specific one was loaded, run: echo $RANDOM_THEME
# See https://github.com/ohmyzsh/ohmyzsh/wiki/Themes
ZSH_THEME="robbyrussell"

# Set list of themes to pick from when loading at random
# Setting this variable when ZSH_THEME=random will cause zsh to load
# a theme from this variable instead of looking in $ZSH/themes/
# If set to an empty array, this variable will have no effect.
# ZSH_THEME_RANDOM_CANDIDATES=( "robbyrussell" "agnoster" )

# Uncomment the following line to use case-sensitive completion.
# CASE_SENSITIVE="true"

# Uncomment the following line to use hyphen-insensitive completion.
# Case-sensitive completion must be off. _ and - will be interchangeable.
# HYPHEN_INSENSITIVE="true"

# Uncomment one of the following lines to change the auto-update behavior
# zstyle ':omz:update' mode disabled  # disable automatic updates
# zstyle ':omz:update' mode auto      # update automatically without asking
# zstyle ':omz:update' mode reminder  # just remind me to update when it's time

# Uncomment the following line to change how often to auto-update (in days).
# zstyle ':omz:update' frequency 13

# Uncomment the following line if pasting URLs and other text is messed up.
# DISABLE_MAGIC_FUNCTIONS="true"

# Uncomment the following line to disable colors in ls.
# DISABLE_LS_COLORS="true"

# Uncomment the following line to disable auto-setting terminal title.
# DISABLE_AUTO_TITLE="true"

# Uncomment the following line to enable command auto-correction.
# ENABLE_CORRECTION="true"

# Uncomment the following line to display red dots whilst waiting for completion.
# You can also set it to another string to have that shown instead of the default red dots.
# e.g. COMPLETION_WAITING_DOTS="%F{yellow}waiting...%f"
# Caution: this setting can cause issues with multiline prompts in zsh < 5.7.1 (see #5765)
# COMPLETION_WAITING_DOTS="true"

# Uncomment the following line if you want to disable marking untracked files
# under VCS as dirty. This makes repository status check for large repositories
# much, much faster.
# DISABLE_UNTRACKED_FILES_DIRTY="true"

# Uncomment the following line if you want to change the command execution time
# stamp shown in the history command output.
# You can set one of the optional three formats:
# "mm/dd/yyyy"|"dd.mm.yyyy"|"yyyy-mm-dd"
# or set a custom format using the strftime function format specifications,
# see 'man strftime' for details.
# HIST_STAMPS="mm/dd/yyyy"

# Would you like to use another custom folder than $ZSH/custom?
# ZSH_CUSTOM=/path/to/new-custom-folder

# Which plugins would you like to load?
# Standard plugins can be found in $ZSH/plugins/
# Custom plugins may be added to $ZSH_CUSTOM/plugins/
# Example format: plugins=(rails git textmate ruby lighthouse)
# Add wisely, as too many plugins slow down shell startup.
plugins=(
  git
  nvm
  fzf-zsh-plugin
  zsh-syntax-highlighting
  zsh-autosuggestions
)

source $ZSH/oh-my-zsh.sh

# User configuration

# export MANPATH="/usr/local/man:$MANPATH"

# You may need to manually set your language environment
# export LANG=en_US.UTF-8


## Tmux
export TERM=xterm-256color


## Windows
export MACHINE=windows
export PATH=$PATH:/usr/bin
export LOVE2D_PATH=/mnt/c/Users/Ben/Downloads/love-11.5-win64/love-11.5-win64/love.exe

## Dotfiles scripts
export DOTFILES="$HOME/.dotfiles"
export PATH="$DOTFILES/bin:$PATH"

## Go
export GOPATH=$HOME/go
export PATH="$PATH:$GOPATH/bin"

export PATH="$PATH:$HOME/google-cloud-sdk/bin"

# Flutter
export PATH="$HOME/Applications/flutter/bin:$PATH"
export PATH="$HOME/.local/bin:$PATH"


[ -f ~/.fzf.zsh ] && source ~/.fzf.zsh

if [ -n "$NVIM_LISTEN_ADDRESS" ]; then
    alias nvim=nvr -cc split --remote-wait +'set bufhidden=wipe'
fi

if [[ -n "$NVIM_LISTEN_ADDRESS" ]]; then
    export VISUAL="nvr -cc split --remote-wait +'set bufhidden=wipe'"
    export EDITOR="nvr -cc split --remote-wait +'set bufhidden=wipe'"
else
  # Preferred editor for local and remote sessions
   if [[ -n $SSH_CONNECTION ]]; then
     export EDITOR='vim'
   else
     export EDITOR='nvim'
   fi
fi

 export PATH=$HOME/.cargo/bin:$PATH

# Flutter
export PATH=$HOME/Applications/flutter/bin:$PATH

# Java
export JAVA_HOME="/usr/"

# export WSL_GPG="/mnt/c/Program Files (x86)/gnupg/bin/gpg.exe"

export GPG_TTY=$(tty)


if [[ bat ]] then alias cat="bat"; fi
if [[ z ]] then alias cd="z"; fi
if [[ lsd ]] then alias ls="lsd"; fi
if [[ gopass ]] then alias pass="gopass"; fi


alias vim="nvim"
alias nvim="v"
alias nvdis="nvr --servername $(nvim-server-name) -s"


# Android
export PATH=$HOME/Applications/android/cmdline-tools/12.0/bin:$PATH
export PATH=$HOME/Applications/android/emulator:$PATH
export PATH=$HOME/Applications/android/platform-tools:$PATH
export ADB_SERVER_SOCKET=tcp:$(cat /etc/resolv.conf | grep nameserver | cut -d' ' -f2):5037

if [ -z "$TMUX" ]
then
    tmux attach || tmux new
fi

export PYTHON=3.11


## NVM
export NVM_DIR="$HOME/.nvm"
 [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"  # This loads nvm
 # [ -s "$NVM_DIR/bash_completion" ] && \. "$NVM_DIR/bash_completion"  # This loads nvm bash_completion

autoload -U add-zsh-hook

load-nvmrc() {
  local nvmrc_path
  nvmrc_path="$(nvm_find_nvmrc)"

  if [ -n "$nvmrc_path" ]; then
    local nvmrc_node_version
    nvmrc_node_version=$(nvm version "$(cat "${nvmrc_path}")")

    if [ "$nvmrc_node_version" = "N/A" ]; then
      nvm install
    elif [ "$nvmrc_node_version" != "$(nvm version)" ]; then
      nvm use
    fi
  elif [ -n "$(PWD=$OLDPWD nvm_find_nvmrc)" ] && [ "$(nvm version)" != "$(nvm version default)" ]; then
    echo "Reverting to nvm default version"
    nvm use default
  fi
}

add-zsh-hook chpwd load-nvmrc
load-nvmrc


 
 
# zprof

export PATH="$HOME/.yarn/bin:$HOME/.config/yarn/global/node_modules/.bin:$PATH"


PLATFORM=$(uname)
if [[ $PLATFORM == 'Linux' ]] then
  alias wslopen="/mnt/c/Windows/explorer.exe \`wslpath -w $PWD\`"
  eval "$(/home/linuxbrew/.linuxbrew/bin/brew shellenv)"

  source ssh-agent-bridge.sh
elif [[ $PLATFORM == 'Darwin' ]]
  alias TexturePacker.exe="/Applications/TexturePacker.app/Contents/MacOS/TexturePacker"
then

fi



# Update config path on mac (at least for lazygit)
export XDG_CONFIG_HOME="$HOME/.config"
export TP_PATH="TexturePacker.exe"


eval "$(starship init zsh)"
eval "$(zoxide init zsh)"
eval "$(pyenv init --path)"

# The next line updates PATH for the Google Cloud SDK.
if [ -f '/Users/ben/google-cloud-sdk/path.zsh.inc' ]; then . '/Users/ben/google-cloud-sdk/path.zsh.inc'; fi

# The next line enables shell command completion for gcloud.
if [ -f '/Users/ben/google-cloud-sdk/completion.zsh.inc' ]; then . '/Users/ben/google-cloud-sdk/completion.zsh.inc'; fi

export GEMINI_API_KEY=$(pass show keepass-noha | keepassxc-cli show ~/.keepass/keepass-noha.kdbx gcloud-free -a gemini -s -q)

# eval $(gpg-agent --daemon)
# if [ -f "${HOME}/.gpg-agent-info" ]; then
#     . "${HOME}/.gpg-agent-info"
#     export GPG_AGENT_INFO
#     export SSH_AUTH_SOCK
# fi
if [[ $PLATFORM == 'Linux' ]] then
  gpg-agent-relay.sh &
fi
